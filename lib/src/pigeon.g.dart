// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum MapType {
  normal,
  satellite,
  dark,
}

/// 定位模式
///
/// 在地图的各种应用场景中，用户对定位点展示时也希望地图能跟随定位点旋转、移动等多种行为
enum MyLocationType {
  /// 连续定位，但不会移动到地图中心点，并且会跟随设备移动
  followNoCenter,
  /// 连续定位，且将视角移动到地图中心，定位点依照设备方向旋转，并且会跟随设备移动,默认是此种类型
  locationRotate,
  /// 连续定位，但不会移动到地图中心点，定位点依照设备方向旋转，并且跟随设备移动
  locationRotateNoCenter,
  /// 连续定位，但不会移动到地图中心点，地图依照设备方向旋转，并且会跟随设备移动
  mapRotateNoCenter,
}

class MyLocationStyle {
  MyLocationStyle({
    this.myLocationType,
  });

  MyLocationType? myLocationType;

  Object encode() {
    return <Object?>[
      myLocationType?.index,
    ];
  }

  static MyLocationStyle decode(Object result) {
    result as List<Object?>;
    return MyLocationStyle(
      myLocationType: result[0] != null
          ? MyLocationType.values[result[0]! as int]
          : null,
    );
  }
}

class LatLng {
  LatLng({
    this.latitude,
    this.longitude,
  });

  double? latitude;

  double? longitude;

  Object encode() {
    return <Object?>[
      latitude,
      longitude,
    ];
  }

  static LatLng decode(Object result) {
    result as List<Object?>;
    return LatLng(
      latitude: result[0] as double?,
      longitude: result[1] as double?,
    );
  }
}

class Location {
  Location({
    this.latitude,
    this.longitude,
    this.bearing,
    this.accuracy,
  });

  double? latitude;

  double? longitude;

  double? bearing;

  double? accuracy;

  Object encode() {
    return <Object?>[
      latitude,
      longitude,
      bearing,
      accuracy,
    ];
  }

  static Location decode(Object result) {
    result as List<Object?>;
    return Location(
      latitude: result[0] as double?,
      longitude: result[1] as double?,
      bearing: result[2] as double?,
      accuracy: result[3] as double?,
    );
  }
}

class MapPoi {
  MapPoi({
    required this.name,
    required this.position,
  });

  String name;

  LatLng position;

  Object encode() {
    return <Object?>[
      name,
      position.encode(),
    ];
  }

  static MapPoi decode(Object result) {
    result as List<Object?>;
    return MapPoi(
      name: result[0]! as String,
      position: LatLng.decode(result[1]! as List<Object?>),
    );
  }
}

class CameraPosition {
  CameraPosition({
    this.bearing,
    this.target,
    this.tilt,
    this.zoom,
  });

  double? bearing;

  LatLng? target;

  double? tilt;

  double? zoom;

  Object encode() {
    return <Object?>[
      bearing,
      target?.encode(),
      tilt,
      zoom,
    ];
  }

  static CameraPosition decode(Object result) {
    result as List<Object?>;
    return CameraPosition(
      bearing: result[0] as double?,
      target: result[1] != null
          ? LatLng.decode(result[1]! as List<Object?>)
          : null,
      tilt: result[2] as double?,
      zoom: result[3] as double?,
    );
  }
}

class MarkerOptions {
  MarkerOptions({
    required this.position,
    this.alpha,
    this.rotation,
    this.zIndex,
    this.flat,
    this.draggable,
    this.icon,
    this.anchor,
  });

  LatLng position;

  double? alpha;

  double? rotation;

  int? zIndex;

  bool? flat;

  bool? draggable;

  Bitmap? icon;

  List<double?>? anchor;

  Object encode() {
    return <Object?>[
      position.encode(),
      alpha,
      rotation,
      zIndex,
      flat,
      draggable,
      icon?.encode(),
      anchor,
    ];
  }

  static MarkerOptions decode(Object result) {
    result as List<Object?>;
    return MarkerOptions(
      position: LatLng.decode(result[0]! as List<Object?>),
      alpha: result[1] as double?,
      rotation: result[2] as double?,
      zIndex: result[3] as int?,
      flat: result[4] as bool?,
      draggable: result[5] as bool?,
      icon: result[6] != null
          ? Bitmap.decode(result[6]! as List<Object?>)
          : null,
      anchor: (result[7] as List<Object?>?)?.cast<double?>(),
    );
  }
}

class PolylineOptions {
  PolylineOptions({
    this.points,
  });

  List<LatLng?>? points;

  Object encode() {
    return <Object?>[
      points,
    ];
  }

  static PolylineOptions decode(Object result) {
    result as List<Object?>;
    return PolylineOptions(
      points: (result[0] as List<Object?>?)?.cast<LatLng?>(),
    );
  }
}

class Bitmap {
  Bitmap({
    this.asset,
    this.bytes,
  });

  String? asset;

  Uint8List? bytes;

  Object encode() {
    return <Object?>[
      asset,
      bytes,
    ];
  }

  static Bitmap decode(Object result) {
    result as List<Object?>;
    return Bitmap(
      asset: result[0] as String?,
      bytes: result[1] as Uint8List?,
    );
  }
}

class TencentMapSdkApi {
  /// Constructor for [TencentMapSdkApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  TencentMapSdkApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = StandardMessageCodec();

  Future<void> initSdk(String? arg_iosApiKey, bool arg_agreePrivacy) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapSdkApi.initSdk', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_iosApiKey, arg_agreePrivacy]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _TencentMapApiCodec extends StandardMessageCodec {
  const _TencentMapApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Bitmap) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is CameraPosition) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is LatLng) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is LatLng) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is Location) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is MarkerOptions) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is MyLocationStyle) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is PolylineOptions) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return Bitmap.decode(readValue(buffer)!);
      case 129: 
        return CameraPosition.decode(readValue(buffer)!);
      case 130: 
        return LatLng.decode(readValue(buffer)!);
      case 131: 
        return LatLng.decode(readValue(buffer)!);
      case 132: 
        return Location.decode(readValue(buffer)!);
      case 133: 
        return MarkerOptions.decode(readValue(buffer)!);
      case 134: 
        return MyLocationStyle.decode(readValue(buffer)!);
      case 135: 
        return PolylineOptions.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class TencentMapApi {
  /// Constructor for [TencentMapApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  TencentMapApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _TencentMapApiCodec();

  Future<void> setMapType(MapType arg_type) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setMapType', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_type.index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setCompassEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setCompassEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setScaleControlsEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setScaleControlsEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setRotateGesturesEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setRotateGesturesEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setScrollGesturesEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setScrollGesturesEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setZoomGesturesEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setZoomGesturesEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setTiltGesturesEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setTiltGesturesEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setIndoorViewEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setIndoorViewEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setTrafficEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setTrafficEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setBuildingsEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setBuildingsEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setMyLocationButtonEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setMyLocationButtonEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setMyLocationEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setMyLocationEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setMyLocation(Location arg_location) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setMyLocation', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_location]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setMyLocationStyle(MyLocationStyle arg_style) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setMyLocationStyle', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_style]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> moveCamera(CameraPosition arg_position, int arg_duration) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.moveCamera', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_position, arg_duration]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String> addMarker(MarkerOptions arg_options) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.addMarker', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_options]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<String> addPolyline(PolylineOptions arg_options) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.addPolyline', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_options]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<void> pause() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.pause', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> resume() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.resume', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stop() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.stop', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> start() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.start', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> destory() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.destory', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _TencentMapHandlerCodec extends StandardMessageCodec {
  const _TencentMapHandlerCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CameraPosition) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is LatLng) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is Location) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is MapPoi) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return CameraPosition.decode(readValue(buffer)!);
      case 129: 
        return LatLng.decode(readValue(buffer)!);
      case 130: 
        return Location.decode(readValue(buffer)!);
      case 131: 
        return MapPoi.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class TencentMapHandler {
  static const MessageCodec<Object?> codec = _TencentMapHandlerCodec();

  void onTap(LatLng latLng);

  void onTapPoi(MapPoi poi);

  void onLongPress(LatLng latLng);

  void onCameraMove(CameraPosition cameraPosition);

  void onCameraIdle(CameraPosition cameraPosition);

  void onLocation(Location location);

  void onTapMarker(String markerId);

  void onMarkerDragStart(String markerId, LatLng latLng);

  void onMarkerDrag(String markerId, LatLng latLng);

  void onMarkerDragEnd(String markerId, LatLng latLng);

  static void setup(TencentMapHandler? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onTap', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onTap was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final LatLng? arg_latLng = (args[0] as LatLng?);
          assert(arg_latLng != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onTap was null, expected non-null LatLng.');
          api.onTap(arg_latLng!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onTapPoi', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onTapPoi was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MapPoi? arg_poi = (args[0] as MapPoi?);
          assert(arg_poi != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onTapPoi was null, expected non-null MapPoi.');
          api.onTapPoi(arg_poi!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onLongPress', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onLongPress was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final LatLng? arg_latLng = (args[0] as LatLng?);
          assert(arg_latLng != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onLongPress was null, expected non-null LatLng.');
          api.onLongPress(arg_latLng!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onCameraMove', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onCameraMove was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final CameraPosition? arg_cameraPosition = (args[0] as CameraPosition?);
          assert(arg_cameraPosition != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onCameraMove was null, expected non-null CameraPosition.');
          api.onCameraMove(arg_cameraPosition!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onCameraIdle', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onCameraIdle was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final CameraPosition? arg_cameraPosition = (args[0] as CameraPosition?);
          assert(arg_cameraPosition != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onCameraIdle was null, expected non-null CameraPosition.');
          api.onCameraIdle(arg_cameraPosition!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onLocation', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onLocation was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Location? arg_location = (args[0] as Location?);
          assert(arg_location != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onLocation was null, expected non-null Location.');
          api.onLocation(arg_location!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onTapMarker', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onTapMarker was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_markerId = (args[0] as String?);
          assert(arg_markerId != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onTapMarker was null, expected non-null String.');
          api.onTapMarker(arg_markerId!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDragStart', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDragStart was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_markerId = (args[0] as String?);
          assert(arg_markerId != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDragStart was null, expected non-null String.');
          final LatLng? arg_latLng = (args[1] as LatLng?);
          assert(arg_latLng != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDragStart was null, expected non-null LatLng.');
          api.onMarkerDragStart(arg_markerId!, arg_latLng!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDrag', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDrag was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_markerId = (args[0] as String?);
          assert(arg_markerId != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDrag was null, expected non-null String.');
          final LatLng? arg_latLng = (args[1] as LatLng?);
          assert(arg_latLng != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDrag was null, expected non-null LatLng.');
          api.onMarkerDrag(arg_markerId!, arg_latLng!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDragEnd', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDragEnd was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_markerId = (args[0] as String?);
          assert(arg_markerId != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDragEnd was null, expected non-null String.');
          final LatLng? arg_latLng = (args[1] as LatLng?);
          assert(arg_latLng != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDragEnd was null, expected non-null LatLng.');
          api.onMarkerDragEnd(arg_markerId!, arg_latLng!);
          return;
        });
      }
    }
  }
}

class _MarkerApiCodec extends StandardMessageCodec {
  const _MarkerApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Bitmap) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is LatLng) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return Bitmap.decode(readValue(buffer)!);
      case 129: 
        return LatLng.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class MarkerApi {
  /// Constructor for [MarkerApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MarkerApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _MarkerApiCodec();

  Future<void> remove(String arg_id) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.MarkerApi.remove', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setRotation(String arg_id, double arg_rotation) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.MarkerApi.setRotation', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id, arg_rotation]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setPosition(String arg_id, LatLng arg_position) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.MarkerApi.setPosition', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id, arg_position]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setAnchor(String arg_id, double arg_x, double arg_y) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.MarkerApi.setAnchor', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id, arg_x, arg_y]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setZIndex(String arg_id, int arg_zIndex) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.MarkerApi.setZIndex', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id, arg_zIndex]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setAlpha(String arg_id, double arg_alpha) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.MarkerApi.setAlpha', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id, arg_alpha]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setIcon(String arg_id, Bitmap arg_icon) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.MarkerApi.setIcon', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id, arg_icon]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setDraggable(String arg_id, bool arg_draggable) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.MarkerApi.setDraggable', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id, arg_draggable]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}
