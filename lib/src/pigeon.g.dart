// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

/// 地图类型
enum MapType {
  /// 常规地图
  normal,
  /// 卫星地图
  satellite,
  /// 暗色地图
  dark,
}

/// UI控件位置锚点
enum UIControlAnchor {
  bottomLeft,
  bottomRight,
  topLeft,
  topRight,
}

/// 定位模式
///
/// 在地图的各种应用场景中，用户对定位点展示时也希望地图能跟随定位点旋转、移动等多种行为
enum UserLocationType {
  /// 跟踪用户的位置与方向更新，默认是此种类型
  trackingLocationRotate,
  /// 追踪用户的位置更新
  trackingLocation,
  /// 跟踪用户的位置与方向更新，并移动到地图中心（Android only, Android default）
  trackingLocationRotateCenter,
  /// 不追踪用户的位置与方向更新（iOS only）
  noTracking,
  /// 跟踪用户的位置与方向更新，并地图依照用户方向旋转（Android only）
  trackingRotate,
}

/// 限制显示区域模式
enum RestrictRegionMode {
  /// 适配宽度
  fitWidth,
  /// 适配高度
  fitHeight,
}

/// UI控件位置偏移
class UIControlOffset {
  UIControlOffset({
    required this.x,
    required this.y,
  });

  /// X轴方向的位置偏移
  double x;

  /// Y轴方向的位置偏移
  double y;

  Object encode() {
    return <Object?>[
      x,
      y,
    ];
  }

  static UIControlOffset decode(Object result) {
    result as List<Object?>;
    return UIControlOffset(
      x: result[0]! as double,
      y: result[1]! as double,
    );
  }
}

/// 点标记图标锚点
class Anchor {
  Anchor({
    required this.x,
    required this.y,
  });

  /// 点标记图标锚点的X坐标
  double x;

  /// 点标记图标锚点的Y坐标
  double y;

  Object encode() {
    return <Object?>[
      x,
      y,
    ];
  }

  static Anchor decode(Object result) {
    result as List<Object?>;
    return Anchor(
      x: result[0]! as double,
      y: result[1]! as double,
    );
  }
}

/// 位置
class Position {
  Position({
    required this.latitude,
    required this.longitude,
  });

  /// 位置的纬度
  double latitude;

  /// 位置的经度
  double longitude;

  Object encode() {
    return <Object?>[
      latitude,
      longitude,
    ];
  }

  static Position decode(Object result) {
    result as List<Object?>;
    return Position(
      latitude: result[0]! as double,
      longitude: result[1]! as double,
    );
  }
}

/// 定位点
class Location {
  Location({
    required this.position,
    this.heading,
    this.accuracy,
  });

  /// 定位点的位置
  Position position;

  /// 定位点的方向
  double? heading;

  /// 定位点的精确度
  double? accuracy;

  Object encode() {
    return <Object?>[
      position.encode(),
      heading,
      accuracy,
    ];
  }

  static Location decode(Object result) {
    result as List<Object?>;
    return Location(
      position: Position.decode(result[0]! as List<Object?>),
      heading: result[1] as double?,
      accuracy: result[2] as double?,
    );
  }
}

/// 地图兴趣点
class MapPoi {
  MapPoi({
    required this.name,
    required this.position,
  });

  /// 兴趣点的名称
  String name;

  /// 兴趣点的位置
  Position position;

  Object encode() {
    return <Object?>[
      name,
      position.encode(),
    ];
  }

  static MapPoi decode(Object result) {
    result as List<Object?>;
    return MapPoi(
      name: result[0]! as String,
      position: Position.decode(result[1]! as List<Object?>),
    );
  }
}

/// 地图视野
class CameraPosition {
  CameraPosition({
    this.position,
    this.heading,
    this.skew,
    this.zoom,
  });

  /// 地图视野的位置
  Position? position;

  /// 地图视野的旋转角度
  double? heading;

  /// 地图视野的倾斜角度
  double? skew;

  /// 地图视野的缩放级别
  double? zoom;

  Object encode() {
    return <Object?>[
      position?.encode(),
      heading,
      skew,
      zoom,
    ];
  }

  static CameraPosition decode(Object result) {
    result as List<Object?>;
    return CameraPosition(
      position: result[0] != null
          ? Position.decode(result[0]! as List<Object?>)
          : null,
      heading: result[1] as double?,
      skew: result[2] as double?,
      zoom: result[3] as double?,
    );
  }
}

/// 地图区域
class Region {
  Region({
    required this.north,
    required this.east,
    required this.south,
    required this.west,
  });

  /// 最北的纬度
  double north;

  /// 最东的经度
  double east;

  /// 最南的纬度
  double south;

  /// 最西的经度
  double west;

  Object encode() {
    return <Object?>[
      north,
      east,
      south,
      west,
    ];
  }

  static Region decode(Object result) {
    result as List<Object?>;
    return Region(
      north: result[0]! as double,
      east: result[1]! as double,
      south: result[2]! as double,
      west: result[3]! as double,
    );
  }
}

/// 视野边缘宽度
class EdgePadding {
  EdgePadding({
    required this.top,
    required this.right,
    required this.bottom,
    required this.left,
  });

  /// 上边缘宽度
  double top;

  /// 右边缘宽度
  double right;

  /// 下边缘宽度
  double bottom;

  /// 左边缘宽度
  double left;

  Object encode() {
    return <Object?>[
      top,
      right,
      bottom,
      left,
    ];
  }

  static EdgePadding decode(Object result) {
    result as List<Object?>;
    return EdgePadding(
      top: result[0]! as double,
      right: result[1]! as double,
      bottom: result[2]! as double,
      left: result[3]! as double,
    );
  }
}

/// 标记点配置属性
class Marker {
  Marker({
    required this.id,
    required this.position,
    this.alpha,
    this.rotation,
    this.zIndex,
    this.draggable,
    this.icon,
    this.anchor,
  });

  /// 标记点ID
  String id;

  /// 标记点的位置
  Position position;

  /// 标记点的透明度
  double? alpha;

  /// 标记点的旋转角度
  double? rotation;

  /// 标记点的Z轴显示顺序
  int? zIndex;

  /// 标记点是否支持拖动
  bool? draggable;

  /// 标记点的图标信息
  Bitmap? icon;

  /// 标记点的锚点
  Anchor? anchor;

  Object encode() {
    return <Object?>[
      id,
      position.encode(),
      alpha,
      rotation,
      zIndex,
      draggable,
      icon?.encode(),
      anchor?.encode(),
    ];
  }

  static Marker decode(Object result) {
    result as List<Object?>;
    return Marker(
      id: result[0]! as String,
      position: Position.decode(result[1]! as List<Object?>),
      alpha: result[2] as double?,
      rotation: result[3] as double?,
      zIndex: result[4] as int?,
      draggable: result[5] as bool?,
      icon: result[6] != null
          ? Bitmap.decode(result[6]! as List<Object?>)
          : null,
      anchor: result[7] != null
          ? Anchor.decode(result[7]! as List<Object?>)
          : null,
    );
  }
}

class MarkerUpdateOptions {
  MarkerUpdateOptions({
    this.position,
    this.alpha,
    this.rotation,
    this.zIndex,
    this.draggable,
    this.icon,
    this.anchor,
  });

  /// 标记点的位置
  Position? position;

  /// 标记点的透明度
  double? alpha;

  /// 标记点的旋转角度
  double? rotation;

  /// 标记点的Z轴显示顺序
  int? zIndex;

  /// 标记点是否支持拖动
  bool? draggable;

  /// 标记点的图标信息
  Bitmap? icon;

  /// 标记点的锚点
  Anchor? anchor;

  Object encode() {
    return <Object?>[
      position?.encode(),
      alpha,
      rotation,
      zIndex,
      draggable,
      icon?.encode(),
      anchor?.encode(),
    ];
  }

  static MarkerUpdateOptions decode(Object result) {
    result as List<Object?>;
    return MarkerUpdateOptions(
      position: result[0] != null
          ? Position.decode(result[0]! as List<Object?>)
          : null,
      alpha: result[1] as double?,
      rotation: result[2] as double?,
      zIndex: result[3] as int?,
      draggable: result[4] as bool?,
      icon: result[5] != null
          ? Bitmap.decode(result[5]! as List<Object?>)
          : null,
      anchor: result[6] != null
          ? Anchor.decode(result[6]! as List<Object?>)
          : null,
    );
  }
}

/// 图片信息
class Bitmap {
  Bitmap({
    this.asset,
    this.bytes,
  });

  /// 图片资源路径
  String? asset;

  /// 图片数据
  Uint8List? bytes;

  Object encode() {
    return <Object?>[
      asset,
      bytes,
    ];
  }

  static Bitmap decode(Object result) {
    result as List<Object?>;
    return Bitmap(
      asset: result[0] as String?,
      bytes: result[1] as Uint8List?,
    );
  }
}

/// 地图SDK接口
class TencentMapSdkApi {
  /// Constructor for [TencentMapSdkApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  TencentMapSdkApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = StandardMessageCodec();

  /// 同意隐私协议，显示地图前必须调用
  Future<void> agreePrivacy(bool arg_agreePrivacy) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapSdkApi.agreePrivacy', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_agreePrivacy]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _TencentMapApiCodec extends StandardMessageCodec {
  const _TencentMapApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Anchor) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is Bitmap) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is CameraPosition) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is EdgePadding) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is Location) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is Marker) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is MarkerUpdateOptions) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is Position) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is Region) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is UIControlOffset) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return Anchor.decode(readValue(buffer)!);
      case 129: 
        return Bitmap.decode(readValue(buffer)!);
      case 130: 
        return CameraPosition.decode(readValue(buffer)!);
      case 131: 
        return EdgePadding.decode(readValue(buffer)!);
      case 132: 
        return Location.decode(readValue(buffer)!);
      case 133: 
        return Marker.decode(readValue(buffer)!);
      case 134: 
        return MarkerUpdateOptions.decode(readValue(buffer)!);
      case 135: 
        return Position.decode(readValue(buffer)!);
      case 136: 
        return Region.decode(readValue(buffer)!);
      case 137: 
        return UIControlOffset.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// 地图操作接口
class TencentMapApi {
  /// Constructor for [TencentMapApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  TencentMapApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _TencentMapApiCodec();

  /// 设置地图类型
  Future<void> setMapType(MapType arg_type) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setMapType', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_type.index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 设置个性化地图样式，在官网绑定个性化地图样式，输入样式编号
  Future<void> setMapStyle(int arg_index) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setMapStyle', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 设置Logo大小
  Future<void> setLogoScale(double arg_scale) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setLogoScale', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_scale]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 设置LOGO的位置
  Future<void> setLogoPosition(UIControlAnchor arg_anchor, UIControlOffset arg_offset) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setLogoPosition', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_anchor.index, arg_offset]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 设置比例尺的位置（iOS不支持改变位置锚点，仅支持改变位置偏移）
  Future<void> setScalePosition(UIControlAnchor arg_anchor, UIControlOffset arg_offset) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setScalePosition', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_anchor.index, arg_offset]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 设置指南针的位置偏移
  Future<void> setCompassOffset(UIControlOffset arg_offset) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setCompassOffset', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_offset]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 设置是否显示指南针
  Future<void> setCompassEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setCompassEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 设置是否显示比例尺
  Future<void> setScaleEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setScaleEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 设置比例尺是否淡出
  Future<void> setScaleFadeEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setScaleFadeEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 设置是否使用旋转手势
  Future<void> setRotateGesturesEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setRotateGesturesEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 设置是否使用滚动手势
  Future<void> setScrollGesturesEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setScrollGesturesEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 设置是否使用缩放手势
  Future<void> setZoomGesturesEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setZoomGesturesEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 设置是否使用倾斜手势
  Future<void> setSkewGesturesEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setSkewGesturesEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 设置是否显示室内图（需要API key支持）
  Future<void> setIndoorViewEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setIndoorViewEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 设置是否显示室内图楼层控件
  Future<void> setIndoorPickerEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setIndoorPickerEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 设置是否显示路况
  Future<void> setTrafficEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setTrafficEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 设置是否显示建筑物
  Future<void> setBuildingsEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setBuildingsEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 设置是否显示3D建筑物
  Future<void> setBuildings3dEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setBuildings3dEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 设置是否开启定位
  Future<void> setMyLocationEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setMyLocationEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 设置定位模式
  Future<void> setUserLocationType(UserLocationType arg_type) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setUserLocationType', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_type.index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 获取当前定位信息
  Future<Location> getUserLocation() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.getUserLocation', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as Location?)!;
    }
  }

  /// 移动地图视野
  Future<void> moveCamera(CameraPosition arg_position, int arg_duration) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.moveCamera', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_position, arg_duration]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 移动地图视野到某个地图区域
  Future<void> moveCameraToRegion(Region arg_region, EdgePadding arg_padding, int arg_duration) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.moveCameraToRegion', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_region, arg_padding, arg_duration]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 移动地图视野到包含一组坐标点的某个地图区域
  Future<void> moveCameraToRegionWithPosition(List<Position?> arg_positions, EdgePadding arg_padding, int arg_duration) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.moveCameraToRegionWithPosition', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_positions, arg_padding, arg_duration]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 限制地图显示区域
  Future<void> setRestrictRegion(Region arg_region, RestrictRegionMode arg_mode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.setRestrictRegion', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_region, arg_mode.index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 添加标记点
  Future<void> addMarker(Marker arg_marker) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.addMarker', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_marker]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 移除标记点
  Future<void> removeMarker(String arg_id) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.removeMarker', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 更新标记点
  Future<void> updateMarker(String arg_markerId, MarkerUpdateOptions arg_options) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.updateMarker', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_markerId, arg_options]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 开始
  Future<void> start() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.start', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 暂停
  Future<void> pause() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.pause', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 恢复
  Future<void> resume() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.resume', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 停止
  Future<void> stop() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.stop', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 销毁
  Future<void> destroy() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.tencent_map.TencentMapApi.destroy', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _TencentMapHandlerCodec extends StandardMessageCodec {
  const _TencentMapHandlerCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CameraPosition) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is Location) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is MapPoi) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is Position) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return CameraPosition.decode(readValue(buffer)!);
      case 129: 
        return Location.decode(readValue(buffer)!);
      case 130: 
        return MapPoi.decode(readValue(buffer)!);
      case 131: 
        return Position.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// 地图状态事件回调处理器
abstract class TencentMapHandler {
  static const MessageCodec<Object?> codec = _TencentMapHandlerCodec();

  /// 当地图比例尺变化时触发该回调，方法会传入单位长度信息，单位为米
  void onScaleViewChanged(double unit);

  /// 当点击地图上任意地点时会触发该回调，方法会传入点击的坐标点，事件可能被上层覆盖物拦截
  void onPress(Position position);

  /// 当地图上任意地点进行长按点击时会触发该回调，事件可能被上层覆盖物拦截（Android Only）
  void onLongPress(Position position);

  /// 当点击地图上任意的POI时调用，方法会传入点击的POI信息
  void onTapPoi(MapPoi poi);

  /// 当地图视野即将改变时会触发该回调（iOS Only）
  void onCameraMoveStart(CameraPosition cameraPosition);

  /// 当地图视野发生变化时触发该回调。视野持续变化时本回调可能会被频繁多次调用, 请不要做耗时或复杂的事情
  void onCameraMove(CameraPosition cameraPosition);

  /// 当地图视野变化完成时触发该回调，需注意当前地图状态有可能并不是稳定状态
  void onCameraMoveEnd(CameraPosition cameraPosition);

  /// 当点击点标记时触发该回调（Android Only）
  void onTapMarker(String markerId);

  /// 当开始拖动点标记时触发该回调（Android Only）
  void onMarkerDragStart(String markerId, Position position);

  /// 当拖动点标记时触发该回调（Android Only）
  void onMarkerDrag(String markerId, Position position);

  /// 当拖动点标记完成时触发该回调（Android Only）
  void onMarkerDragEnd(String markerId, Position position);

  /// 当前位置改变时触发该回调（Android Only）
  void onLocation(Location location);

  /// 当点击地图上的定位标会触发该回调
  void onUserLocationClick(Position position);

  static void setup(TencentMapHandler? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onScaleViewChanged', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onScaleViewChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_unit = (args[0] as double?);
          assert(arg_unit != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onScaleViewChanged was null, expected non-null double.');
          api.onScaleViewChanged(arg_unit!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onPress', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onPress was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Position? arg_position = (args[0] as Position?);
          assert(arg_position != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onPress was null, expected non-null Position.');
          api.onPress(arg_position!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onLongPress', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onLongPress was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Position? arg_position = (args[0] as Position?);
          assert(arg_position != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onLongPress was null, expected non-null Position.');
          api.onLongPress(arg_position!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onTapPoi', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onTapPoi was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MapPoi? arg_poi = (args[0] as MapPoi?);
          assert(arg_poi != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onTapPoi was null, expected non-null MapPoi.');
          api.onTapPoi(arg_poi!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onCameraMoveStart', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onCameraMoveStart was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final CameraPosition? arg_cameraPosition = (args[0] as CameraPosition?);
          assert(arg_cameraPosition != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onCameraMoveStart was null, expected non-null CameraPosition.');
          api.onCameraMoveStart(arg_cameraPosition!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onCameraMove', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onCameraMove was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final CameraPosition? arg_cameraPosition = (args[0] as CameraPosition?);
          assert(arg_cameraPosition != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onCameraMove was null, expected non-null CameraPosition.');
          api.onCameraMove(arg_cameraPosition!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onCameraMoveEnd', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onCameraMoveEnd was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final CameraPosition? arg_cameraPosition = (args[0] as CameraPosition?);
          assert(arg_cameraPosition != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onCameraMoveEnd was null, expected non-null CameraPosition.');
          api.onCameraMoveEnd(arg_cameraPosition!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onTapMarker', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onTapMarker was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_markerId = (args[0] as String?);
          assert(arg_markerId != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onTapMarker was null, expected non-null String.');
          api.onTapMarker(arg_markerId!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDragStart', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDragStart was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_markerId = (args[0] as String?);
          assert(arg_markerId != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDragStart was null, expected non-null String.');
          final Position? arg_position = (args[1] as Position?);
          assert(arg_position != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDragStart was null, expected non-null Position.');
          api.onMarkerDragStart(arg_markerId!, arg_position!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDrag', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDrag was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_markerId = (args[0] as String?);
          assert(arg_markerId != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDrag was null, expected non-null String.');
          final Position? arg_position = (args[1] as Position?);
          assert(arg_position != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDrag was null, expected non-null Position.');
          api.onMarkerDrag(arg_markerId!, arg_position!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDragEnd', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDragEnd was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_markerId = (args[0] as String?);
          assert(arg_markerId != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDragEnd was null, expected non-null String.');
          final Position? arg_position = (args[1] as Position?);
          assert(arg_position != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onMarkerDragEnd was null, expected non-null Position.');
          api.onMarkerDragEnd(arg_markerId!, arg_position!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onLocation', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onLocation was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Location? arg_location = (args[0] as Location?);
          assert(arg_location != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onLocation was null, expected non-null Location.');
          api.onLocation(arg_location!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.tencent_map.TencentMapHandler.onUserLocationClick', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onUserLocationClick was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Position? arg_position = (args[0] as Position?);
          assert(arg_position != null,
              'Argument for dev.flutter.pigeon.tencent_map.TencentMapHandler.onUserLocationClick was null, expected non-null Position.');
          api.onUserLocationClick(arg_position!);
          return;
        });
      }
    }
  }
}
